generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  phone         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)
  profileImage  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  wallet       Wallet?
  transactions Transaction[]
  orders       Order[]
  qrCode       QRCode?
}

model Business {
  id                  String   @id @default(uuid())
  name                String
  businessType        BusinessType
  email               String   @unique
  phone               String   @unique
  password            String
  address             String?  @db.Text
  logo                String?
  isVerified          Boolean  @default(false)
  isActive            Boolean  @default(true)
  subscriptionStatus  SubscriptionStatus @default(TRIAL)
  subscriptionEndDate DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  categories  ProductCategory[]
  products    Product[]
  qrCodes     QRCode[]
  orders      Order[]
  dispatchers Dispatcher[]
  scanners    Scanner[]
}

model Dispatcher {
  id         String   @id @default(uuid())
  businessId String
  name       String
  email      String   @unique
  phone      String   @unique
  password   String
  role       String   @default("dispatcher")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  business Business @relation(fields: [businessId], references: [id])
  orders   Order[]
}

model Scanner {
  id         String   @id @default(uuid())
  businessId String
  name       String
  email      String   @unique
  phone      String   @unique
  password   String
  role       String   @default("scanner")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  business       Business @relation(fields: [businessId], references: [id])
  qrAssignments  QRCode[]
}

model ProductCategory {
  id          String   @id @default(uuid())
  businessId  String
  name        String
  description String?  @db.Text
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business Business  @relation(fields: [businessId], references: [id])
  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  businessId  String
  categoryId  String
  name        String
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  sku         String
  image       String?
  isAvailable Boolean  @default(true)
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business  Business        @relation(fields: [businessId], references: [id])
  category  ProductCategory @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@unique([businessId, sku])
}

model QRCode {
  id           String    @id @default(uuid())
  businessId   String
  code         String
  qrData       Json
  imageUrl     String
  userId       String?   @unique
  assignedAt   DateTime?
  assignedBy   String?
  isActive     Boolean   @default(true)
  isPrinted    Boolean   @default(false)
  printedAt    DateTime?
  scannedCount Int       @default(0)
  lastScannedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  business Business @relation(fields: [businessId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])
  scanner  Scanner? @relation(fields: [assignedBy], references: [id])

  @@unique([businessId, code])
}

model Wallet {
  id          String   @id @default(uuid())
  userId      String   @unique
  balance     Decimal  @default(0.00) @db.Decimal(10, 2)
  totalTopups Decimal  @default(0.00) @db.Decimal(10, 2)
  totalSpent  Decimal  @default(0.00) @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id               String          @id @default(uuid())
  userId           String
  walletId         String
  type             TransactionType
  amount           Decimal         @db.Decimal(10, 2)
  description      String?
  paymentMethod    PaymentMethod
  paymentReference String?
  status           TransactionStatus
  orderId          String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  wallet Wallet @relation(fields: [walletId], references: [id])
  order  Order? @relation(fields: [orderId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  businessId    String
  userId        String
  dispatcherId  String
  orderNumber   String
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @default(0.00) @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  orderStatus   OrderStatus   @default(PENDING)
  qrCodeScanned Boolean       @default(false)
  scannedAt     DateTime?
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  business     Business      @relation(fields: [businessId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  dispatcher   Dispatcher    @relation(fields: [dispatcherId], references: [id])
  orderItems   OrderItem[]
  transactions Transaction[]

  @@unique([businessId, orderNumber])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model SuperAdmin {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  role             String   @default("super_admin")
  lastLoginIp      String?
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum BusinessType {
  COMPANY
  INDIVIDUAL
  GROUP
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  SUSPENDED
}

enum TransactionType {
  TOPUP
  PURCHASE
  REFUND
}

enum PaymentMethod {
  WALLET
  CARD
  MPESA
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}